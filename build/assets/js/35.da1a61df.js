(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{523:function(a,s,n){"use strict";n.r(s);var t=n(3),e=Object(t.a)({},(function(){var a=this,s=a._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h2",{attrs:{id:"spring-包含的模块有哪些"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#spring-包含的模块有哪些"}},[a._v("#")]),a._v(" Spring 包含的模块有哪些？")]),a._v(" "),s("h3",{attrs:{id:"core-container"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#core-container"}},[a._v("#")]),a._v(" Core Container")]),a._v(" "),s("p",[a._v("Spring 框架的核心模块，也可以说是基础模块，主要提供 IoC 依赖注入功能的支持。Spring 其他所有的功能基本都需要依赖于该模块，我们从上面那张 Spring 各个模块的依赖关系图就可以看出来。")]),a._v(" "),s("ul",[s("li",[a._v("spring-core：Spring 框架基本的核心工具类。")]),a._v(" "),s("li",[a._v("spring-beans：提供对 bean 的创建、配置和管理等功能的支持。")]),a._v(" "),s("li",[a._v("spring-context：提供对国际化、事件传播、资源加载等功能的支持。")]),a._v(" "),s("li",[a._v("spring-expression：提供对表达式语言（Spring Expression Language） SpEL 的支持，只依赖于 core 模块，不依赖于其他模块，可以单独使用。")])]),a._v(" "),s("h3",{attrs:{id:"aop"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#aop"}},[a._v("#")]),a._v(" AOP")]),a._v(" "),s("ul",[s("li",[s("strong",[a._v("spring-aspects")]),a._v("：该模块为与 AspectJ 的集成提供支持。")]),a._v(" "),s("li",[s("strong",[a._v("spring-aop")]),a._v("：提供了面向切面的编程实现。")]),a._v(" "),s("li",[s("strong",[a._v("spring-instrument")]),a._v("：提供了为 JVM 添加代理（agent）的功能。 具体来讲，它为 Tomcat 提供了一个织入代理，能够为 Tomcat 传递类文 件，就像这些文件是被类加载器加载的一样。没有理解也没关系，这个模块的使用场景非常有限。")])]),a._v(" "),s("h3",{attrs:{id:"data-access-integration"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#data-access-integration"}},[a._v("#")]),a._v(" Data Access/Integration")]),a._v(" "),s("ul",[s("li",[s("strong",[a._v("spring-jdbc")]),a._v("：提供了对数据库访问的抽象 JDBC。不同的数据库都有自己独立的 API 用于操作数据库，而 Java 程序只需要和 JDBC API 交互，这样就屏蔽了数据库的影响。")]),a._v(" "),s("li",[s("strong",[a._v("spring-tx")]),a._v("：提供对事务的支持。")]),a._v(" "),s("li",[s("strong",[a._v("spring-orm")]),a._v("：提供对 Hibernate、JPA、iBatis 等 ORM 框架的支持。")]),a._v(" "),s("li",[s("strong",[a._v("spring-oxm")]),a._v("：提供一个抽象层支撑 OXM(Object-to-XML-Mapping)，例如：JAXB、Castor、XMLBeans、JiBX 和 XStream 等。")]),a._v(" "),s("li",[s("strong",[a._v("spring-jms")]),a._v(" : 消息服务。自 Spring Framework 4.1 以后，它还提供了对 spring-messaging 模块的继承。")])]),a._v(" "),s("h3",{attrs:{id:"spring-web"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#spring-web"}},[a._v("#")]),a._v(" Spring Web")]),a._v(" "),s("ul",[s("li",[s("strong",[a._v("spring-web")]),a._v("：对 Web 功能的实现提供一些最基础的支持。")]),a._v(" "),s("li",[s("strong",[a._v("spring-webmvc")]),a._v("：提供对 Spring MVC 的实现。")]),a._v(" "),s("li",[s("strong",[a._v("spring-websocket")]),a._v("：提供了对 WebSocket 的支持，WebSocket 可以让客户端和服务端进行双向通信。")]),a._v(" "),s("li",[s("strong",[a._v("spring-webflux")]),a._v("：提供对 WebFlux 的支持。WebFlux 是 Spring Framework 5.0 中引入的新的响应式框架。与 Spring MVC 不同，它不需要 Servlet API，是完全异步。")])]),a._v(" "),s("h3",{attrs:{id:"messaging"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#messaging"}},[a._v("#")]),a._v(" Messaging")]),a._v(" "),s("p",[s("strong",[a._v("spring-messaging")]),a._v(" 是从 Spring4.0 开始新加入的一个模块，主要职责是为 Spring 框架集成一些基础的报文传送应用。")]),a._v(" "),s("h3",{attrs:{id:"spring-test"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#spring-test"}},[a._v("#")]),a._v(" Spring Test")]),a._v(" "),s("p",[a._v("Spring 团队提倡测试驱动开发（TDD）。有了控制反转 (IoC)的帮助，单元测试和集成测试变得更简单。")]),a._v(" "),s("p",[a._v("Spring 的测试模块对 JUnit（单元测试框架）、TestNG（类似 JUnit）、Mockito（主要用来 Mock 对象）、PowerMock（解决 Mockito 的问题比如无法模拟 final, static， private 方法）等等常用的测试框架支持的都比较好")]),a._v(" "),s("h2",{attrs:{id:"spring-spring-mvc-spring-boot-之间什么关系"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#spring-spring-mvc-spring-boot-之间什么关系"}},[a._v("#")]),a._v(" Spring,Spring MVC,Spring Boot 之间什么关系?")]),a._v(" "),s("ul",[s("li",[s("p",[a._v("Spring 包含了多个功能模块（上面刚刚提到过），其中最重要的是 Spring-Core（主要提供 IoC 依赖注入功能的支持） 模块， Spring 中的其他模块（比如 Spring MVC）的功能实现基本都需要依赖于该模块。")])]),a._v(" "),s("li",[s("p",[a._v("Spring MVC 是 Spring 中的一个很重要的模块，主要赋予 Spring 快速构建 MVC 架构的 Web 程序的能力。MVC 是模型(Model)、视图(View)、控制器(Controller)的简写，其核心思想是通过将业务逻辑、数据、显示分离来组织代码。")])]),a._v(" "),s("li",[s("p",[a._v("使用 Spring 进行开发各种配置过于麻烦比如开启某些 Spring 特性时，需要用 XML 或 Java 进行显式配置。于是，Spring Boot 诞生了！")]),a._v(" "),s("p",[a._v("Spring 旨在简化 J2EE 企业应用程序开发。Spring Boot 旨在简化 Spring 开发（减少配置文件，开箱即用！）。")]),a._v(" "),s("p",[a._v("Spring Boot 只是简化了配置，如果你需要构建 MVC 架构的 Web 程序，你还是需要使用 Spring MVC 作为 MVC 框架，只是说 Spring Boot 帮你简化了 Spring MVC 的很多配置，真正做到开箱即用。")])])]),a._v(" "),s("h2",{attrs:{id:"spring-ioc"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#spring-ioc"}},[a._v("#")]),a._v(" Spring Ioc")]),a._v(" "),s("p",[s("strong",[a._v("IoC（Inversion of Control:控制反转）")]),a._v(" 是一种设计思想，而不是一个具体的技术实现。IoC 的思想就是将原本在程序中手动创建对象的控制权，交由 Spring 框架来管理。不过， IoC 并非 Spring 特有，在其他语言中也有应用。")]),a._v(" "),s("p",[s("strong",[a._v("为什么叫控制反转？")])]),a._v(" "),s("ul",[s("li",[s("strong",[a._v("控制")]),a._v("：指的是对象创建（实例化、管理）的权力")]),a._v(" "),s("li",[s("strong",[a._v("反转")]),a._v("：控制权交给外部环境（Spring 框架、IoC 容器）")])]),a._v(" "),s("p",[a._v("将对象之间的相互依赖关系交给 IoC 容器来管理，并由 IoC 容器完成对象的注入。这样可以很大程度上简化应用的开发，把应用从复杂的依赖关系中解放出来。 IoC 容器就像是一个工厂一样，当我们需要创建一个对象的时候，只需要配置好配置文件/注解即可，完全不用考虑对象是如何被创建出来的。")]),a._v(" "),s("p",[a._v("在实际项目中一个 Service 类可能依赖了很多其他的类，假如我们需要实例化这个 Service，你可能要每次都要搞清这个 Service 所有底层类的构造函数，这可能会把人逼疯。如果利用 IoC 的话，你只需要配置好，然后在需要的地方引用就行了，这大大增加了项目的可维护性且降低了开发难度。")]),a._v(" "),s("p",[a._v("在 Spring 中， IoC 容器是 Spring 用来实现 IoC 的载体， IoC 容器实际上就是个 Map（key，value），Map 中存放的是各种对象。")]),a._v(" "),s("p",[a._v("Spring 时代我们一般通过 XML 文件来配置 Bean，后来开发人员觉得 XML 文件来配置不太好，于是 SpringBoot 注解配置就慢慢开始流行起来。")]),a._v(" "),s("h2",{attrs:{id:"什么是-spring-bean"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么是-spring-bean"}},[a._v("#")]),a._v(" 什么是 Spring Bean")]),a._v(" "),s("p",[a._v("简单来说，Bean 代指的就是那些被 IoC 容器所管理的对象。")]),a._v(" "),s("h2",{attrs:{id:"将一个类声明为-bean-的注解有哪些"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#将一个类声明为-bean-的注解有哪些"}},[a._v("#")]),a._v(" 将一个类声明为 Bean 的注解有哪些?")]),a._v(" "),s("ul",[s("li",[s("p",[s("code",[a._v("@Component")]),a._v("：通用的注解，可标注任意类为 "),s("code",[a._v("Spring")]),a._v(" 组件。如果一个 Bean 不知道属于哪个层，可以使用"),s("code",[a._v("@Component")]),a._v(" 注解标注。")])]),a._v(" "),s("li",[s("p",[s("code",[a._v("@Repository")]),a._v(" : 对应持久层即 Dao 层，主要用于数据库相关操作。")])]),a._v(" "),s("li",[s("p",[s("code",[a._v("@Service")]),a._v(" : 对应服务层，主要涉及一些复杂的逻辑，需要用到 Dao 层。")])]),a._v(" "),s("li",[s("p",[s("code",[a._v("@Controller")]),a._v(" : 对应 Spring MVC 控制层，主要用于接受用户请求并调用 "),s("code",[a._v("Service")]),a._v(" 层返回数据给前端页面。")])])]),a._v(" "),s("h2",{attrs:{id:"component-和-bean-的区别是什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#component-和-bean-的区别是什么"}},[a._v("#")]),a._v(" @Component 和 @Bean 的区别是什么？")]),a._v(" "),s("ul",[s("li",[s("code",[a._v("@Component")]),a._v(" 注解作用于类，而"),s("code",[a._v("@Bean")]),a._v("注解作用于方法。")]),a._v(" "),s("li",[s("code",[a._v("@Component")]),a._v("通常是通过类路径扫描来自动侦测以及自动装配到 Spring 容器中（我们可以使用 "),s("code",[a._v("@ComponentScan")]),a._v(" 注解定义要扫描的路径从中找出标识了需要装配的类自动装配到 Spring 的 bean 容器中）。"),s("code",[a._v("@Bean")]),a._v(" 注解通常是我们在标有该注解的方法中定义产生这个 bean,"),s("code",[a._v("@Bean")]),a._v("告诉了 Spring 这是某个类的实例，当我需要用它的时候还给我。")]),a._v(" "),s("li",[s("code",[a._v("@Bean")]),a._v(" 注解比 "),s("code",[a._v("@Component")]),a._v(" 注解的自定义性更强，而且很多地方我们只能通过 "),s("code",[a._v("@Bean")]),a._v(" 注解来注册 bean。比如当我们引用第三方库中的类需要装配到 "),s("code",[a._v("Spring")]),a._v("容器时，则只能通过 "),s("code",[a._v("@Bean")]),a._v("来实现。")])]),a._v(" "),s("h2",{attrs:{id:"autowired-和-resource-的区别是什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#autowired-和-resource-的区别是什么"}},[a._v("#")]),a._v(" @Autowired 和 @Resource 的区别是什么？")]),a._v(" "),s("ul",[s("li",[s("strong",[a._v("@Autowired")])])]),a._v(" "),s("p",[s("code",[a._v("Autowired")]),a._v(" 属于 Spring 内置的注解，默认的注入方式为"),s("code",[a._v("byType")]),a._v("（根据类型进行匹配），也就是说会优先根据接口类型去匹配并注入 Bean （接口的实现类）。")]),a._v(" "),s("p",[s("strong",[a._v("这会有什么问题呢？")]),a._v(" 当一个接口存在多个实现类的话，"),s("code",[a._v("byType")]),a._v("这种方式就无法正确注入对象了，因为这个时候 Spring 会同时找到多个满足条件的选择，默认情况下它自己不知道选择哪一个。")]),a._v(" "),s("p",[a._v("这种情况下，注入方式会变为 "),s("code",[a._v("byName")]),a._v("（根据名称进行匹配），这个名称通常就是类名（首字母小写）。")]),a._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("/**\n* SmsService 接口有两个实现类: SmsServiceImpl1和 SmsServiceImpl2，且它们都已经被 Spring 容器所管理。\n*/")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 报错，byName 和 byType 都无法匹配到 bean")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@Autowired")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("private")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("SmsService")]),a._v(" smsService"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 正确注入 SmsServiceImpl1 对象对应的 bean")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@Autowired")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("private")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("SmsService")]),a._v(" smsServiceImpl1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 正确注入  SmsServiceImpl1 对象对应的 bean")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// smsServiceImpl1 就是我们上面所说的名称")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@Autowired")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@Qualifier")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("value "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"smsServiceImpl1"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("private")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("SmsService")]),a._v(" smsService"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br"),s("span",{staticClass:"line-number"},[a._v("12")]),s("br"),s("span",{staticClass:"line-number"},[a._v("13")]),s("br"),s("span",{staticClass:"line-number"},[a._v("14")]),s("br"),s("span",{staticClass:"line-number"},[a._v("15")]),s("br")])]),s("p",[a._v("我们还是建议通过 "),s("code",[a._v("@Qualifier")]),a._v(" 注解来显式指定名称而不是依赖变量的名称。")]),a._v(" "),s("ul",[s("li",[s("p",[s("strong",[a._v("Resource")])]),a._v(" "),s("p",[s("code",[a._v("@Resource")]),a._v("属于 JDK 提供的注解，默认注入方式为 "),s("code",[a._v("byName")]),a._v("。如果无法通过名称匹配到对应的 Bean 的话，注入方式会变为"),s("code",[a._v("byType")]),a._v("。")]),a._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("/**\n*如果仅指定 name 属性则注入方式为byName，如果仅指定type属性则注入方式为byType，如果同时指定name 和type属性（不建议这么做）则注入方式为byType+byName。\n*/")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 报错，byName 和 byType 都无法匹配到 bean")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@Resource")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("private")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("SmsService")]),a._v(" smsService"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 正确注入 SmsServiceImpl1 对象对应的 bean")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@Resource")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("private")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("SmsService")]),a._v(" smsServiceImpl1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 正确注入 SmsServiceImpl1 对象对应的 bean（比较推荐这种方式）")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@Resource")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("name "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"smsServiceImpl1"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("private")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("SmsService")]),a._v(" smsService"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br"),s("span",{staticClass:"line-number"},[a._v("12")]),s("br"),s("span",{staticClass:"line-number"},[a._v("13")]),s("br")])])])]),a._v(" "),s("p",[a._v("简单总结一下：")]),a._v(" "),s("ul",[s("li",[s("code",[a._v("@Autowired")]),a._v(" 是 Spring 提供的注解，"),s("code",[a._v("@Resource")]),a._v(" 是 JDK 提供的注解。")]),a._v(" "),s("li",[s("code",[a._v("Autowired")]),a._v(" 默认的注入方式为"),s("code",[a._v("byType")]),a._v("（根据类型进行匹配），"),s("code",[a._v("@Resource")]),a._v("默认注入方式为 "),s("code",[a._v("byName")]),a._v("（根据名称进行匹配）。")]),a._v(" "),s("li",[a._v("当一个接口存在多个实现类的情况下，"),s("code",[a._v("@Autowired")]),a._v(" 和"),s("code",[a._v("@Resource")]),a._v("都需要通过名称才能正确匹配到对应的 Bean。"),s("code",[a._v("Autowired")]),a._v(" 可以通过 "),s("code",[a._v("@Qualifier")]),a._v(" 注解来显式指定名称，"),s("code",[a._v("@Resource")]),a._v("可以通过 "),s("code",[a._v("name")]),a._v(" 属性来显式指定名称。")]),a._v(" "),s("li",[s("code",[a._v("@Autowired")]),a._v(" 支持在构造函数、方法、字段和参数上使用。"),s("code",[a._v("@Resource")]),a._v(" 主要用于字段和方法上的注入，不支持在构造函数或参数上使用。")])]),a._v(" "),s("h2",{attrs:{id:"bean-的作用域有哪些"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#bean-的作用域有哪些"}},[a._v("#")]),a._v(" Bean 的作用域有哪些?")]),a._v(" "),s("p",[a._v("Spring 中 Bean 的作用域通常有下面几种：")]),a._v(" "),s("ul",[s("li",[s("strong",[a._v("singleton")]),a._v(" : IoC 容器中只有唯一的 bean 实例。Spring 中的 bean 默认都是单例的，是对单例设计模式的应用。")]),a._v(" "),s("li",[s("strong",[a._v("prototype")]),a._v(" : 每次获取都会创建一个新的 bean 实例。也就是说，连续 "),s("code",[a._v("getBean()")]),a._v(" 两次，得到的是不同的 Bean 实例。")]),a._v(" "),s("li",[s("strong",[a._v("request")]),a._v(" （仅 Web 应用可用）: 每一次 HTTP 请求都会产生一个新的 bean（请求 bean），该 bean 仅在当前 HTTP request 内有效。")]),a._v(" "),s("li",[s("strong",[a._v("session")]),a._v(" （仅 Web 应用可用） : 每一次来自新 session 的 HTTP 请求都会产生一个新的 bean（会话 bean），该 bean 仅在当前 HTTP session 内有效。")]),a._v(" "),s("li",[s("strong",[a._v("application/global-session")]),a._v(" （仅 Web 应用可用）：每个 Web 应用在启动时创建一个 Bean（应用 Bean），该 bean 仅在当前应用启动时间内有效。")]),a._v(" "),s("li",[s("strong",[a._v("websocket")]),a._v(" （仅 Web 应用可用）：每一次 WebSocket 会话产生一个新的 bean。")])]),a._v(" "),s("h3",{attrs:{id:"如何配置-bean-的作用域呢"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何配置-bean-的作用域呢"}},[a._v("#")]),a._v(" "),s("strong",[a._v("如何配置 bean 的作用域呢？")])]),a._v(" "),s("p",[a._v("xml 方式：")]),a._v(" "),s("div",{staticClass:"language-xml line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-xml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("bean")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[a._v("id")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v('"')]),a._v("..."),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v('"')])]),a._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[a._v("class")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v('"')]),a._v("..."),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v('"')])]),a._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[a._v("scope")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v('"')]),a._v("singleton"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v('"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("</")]),a._v("bean")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br")])]),s("p",[a._v("注解方式：")]),a._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@Bean")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@Scope")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("value "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ConfigurableBeanFactory")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("SCOPE_PROTOTYPE")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Person")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("personPrototype")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Person")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br")])]),s("h3",{attrs:{id:"bean-是线程安全的吗"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#bean-是线程安全的吗"}},[a._v("#")]),a._v(" "),s("a",{attrs:{href:"#bean-%E6%98%AF%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E7%9A%84%E5%90%97"}},[a._v("Bean 是线程安全的吗？")])]),a._v(" "),s("p",[a._v("Spring 框架中的 Bean 是否线程安全，取决于其作用域和状态。")]),a._v(" "),s("p",[a._v("我们这里以最常用的两种作用域 prototype 和 singleton 为例介绍。几乎所有场景的 Bean 作用域都是使用默认的 singleton ，重点关注 singleton 作用域即可。")]),a._v(" "),s("p",[a._v("prototype 作用域下，每次获取都会创建一个新的 bean 实例，不存在资源竞争问题，所以不存在线程安全问题。singleton 作用域下，IoC 容器中只有唯一的 bean 实例，可能会存在资源竞争问题（取决于 Bean 是否有状态）。如果这个 bean 是有状态的话，那就存在线程安全问题（有状态 Bean 是指包含可变的成员变量的对象）。")]),a._v(" "),s("p",[a._v("不过，大部分 Bean 实际都是无状态（没有定义可变的成员变量）的（比如 Dao、Service），这种情况下， Bean 是线程安全的。")]),a._v(" "),s("p",[a._v("对于有状态单例 Bean 的线程安全问题，常见的有两种解决办法：")]),a._v(" "),s("ol",[s("li",[a._v("在 Bean 中尽量避免定义可变的成员变量。")]),a._v(" "),s("li",[a._v("在类中定义一个 "),s("code",[a._v("ThreadLocal")]),a._v(" 成员变量，将需要的可变成员变量保存在 "),s("code",[a._v("ThreadLocal")]),a._v(" 中（推荐的一种方式）")])]),a._v(" "),s("h3",{attrs:{id:"bean-的生命周期了解么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#bean-的生命周期了解么"}},[a._v("#")]),a._v(" "),s("a",{attrs:{href:"#bean-%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E4%BA%86%E8%A7%A3%E4%B9%88"}},[a._v("Bean 的生命周期了解么?")])]),a._v(" "),s("ol",[s("li",[s("strong",[a._v("创建 Bean 的实例")]),a._v("：Bean 容器首先会找到配置文件中的 Bean 定义，然后使用 Java 反射 API 来创建 Bean 的实例。")]),a._v(" "),s("li",[s("strong",[a._v("Bean 属性赋值/填充")]),a._v("：为 Bean 设置相关属性和依赖，例如"),s("code",[a._v("@Autowired")]),a._v(" 等注解注入的对象、"),s("code",[a._v("@Value")]),a._v(" 注入的值、"),s("code",[a._v("setter")]),a._v("方法或构造函数注入依赖和值、"),s("code",[a._v("@Resource")]),a._v("注入的各种资源。")]),a._v(" "),s("li",[s("strong",[a._v("Bean 初始化")]),a._v("：\n"),s("ul",[s("li",[a._v("如果 Bean 实现了 "),s("code",[a._v("BeanNameAware")]),a._v(" 接口，调用 "),s("code",[a._v("setBeanName()")]),a._v("方法，传入 Bean 的名字。")]),a._v(" "),s("li",[a._v("如果 Bean 实现了 "),s("code",[a._v("BeanClassLoaderAware")]),a._v(" 接口，调用 "),s("code",[a._v("setBeanClassLoader()")]),a._v("方法，传入 "),s("code",[a._v("ClassLoader")]),a._v("对象的实例。")]),a._v(" "),s("li",[a._v("如果 Bean 实现了 "),s("code",[a._v("BeanFactoryAware")]),a._v(" 接口，调用 "),s("code",[a._v("setBeanFactory()")]),a._v("方法，传入 "),s("code",[a._v("BeanFactory")]),a._v("对象的实例。")]),a._v(" "),s("li",[a._v("与上面的类似，如果实现了其他 "),s("code",[a._v("*.Aware")]),a._v("接口，就调用相应的方法。")]),a._v(" "),s("li",[a._v("如果有和加载这个 Bean 的 Spring 容器相关的 "),s("code",[a._v("BeanPostProcessor")]),a._v(" 对象，执行"),s("code",[a._v("postProcessBeforeInitialization()")]),a._v(" 方法")]),a._v(" "),s("li",[a._v("如果 Bean 实现了"),s("code",[a._v("InitializingBean")]),a._v("接口，执行"),s("code",[a._v("afterPropertiesSet()")]),a._v("方法。")]),a._v(" "),s("li",[a._v("如果 Bean 在配置文件中的定义包含 "),s("code",[a._v("init-method")]),a._v(" 属性，执行指定的方法。")]),a._v(" "),s("li",[a._v("如果有和加载这个 Bean 的 Spring 容器相关的 "),s("code",[a._v("BeanPostProcessor")]),a._v(" 对象，执行"),s("code",[a._v("postProcessAfterInitialization()")]),a._v(" 方法。")])])]),a._v(" "),s("li",[s("strong",[a._v("销毁 Bean")]),a._v("：销毁并不是说要立马把 Bean 给销毁掉，而是把 Bean 的销毁方法先记录下来，将来需要销毁 Bean 或者销毁容器的时候，就调用这些方法去释放 Bean 所持有的资源。\n"),s("ul",[s("li",[a._v("如果 Bean 实现了 "),s("code",[a._v("DisposableBean")]),a._v(" 接口，执行 "),s("code",[a._v("destroy()")]),a._v(" 方法。")]),a._v(" "),s("li",[a._v("如果 Bean 在配置文件中的定义包含 "),s("code",[a._v("destroy-method")]),a._v(" 属性，执行指定的 Bean 销毁方法。或者，也可以直接通过"),s("code",[a._v("@PreDestroy")]),a._v(" 注解标记 Bean 销毁之前执行的方法。")])])])]),a._v(" "),s("p",[s("code",[a._v("AbstractAutowireCapableBeanFactory")]),a._v(" 的 "),s("code",[a._v("doCreateBean()")]),a._v(" 方法中能看到依次执行了这 4 个阶段：")]),a._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("protected")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Object")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("doCreateBean")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),a._v(" beanName"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("RootBeanDefinition")]),a._v(" mbd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@Nullable")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Object")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" args"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("throws")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("BeanCreationException")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 1. 创建 Bean 的实例")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("BeanWrapper")]),a._v(" instanceWrapper "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("if")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("instanceWrapper "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("==")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        instanceWrapper "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("createBeanInstance")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("beanName"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" mbd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" args"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Object")]),a._v(" exposedObject "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" bean"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("try")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 2. Bean 属性赋值/填充")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("populateBean")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("beanName"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" mbd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" instanceWrapper"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 3. Bean 初始化")]),a._v("\n        exposedObject "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("initializeBean")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("beanName"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" exposedObject"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" mbd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 4. 销毁 Bean-注册回调接口")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("try")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("registerDisposableBeanIfNecessary")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("beanName"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" bean"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" mbd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" exposedObject"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br"),s("span",{staticClass:"line-number"},[a._v("12")]),s("br"),s("span",{staticClass:"line-number"},[a._v("13")]),s("br"),s("span",{staticClass:"line-number"},[a._v("14")]),s("br"),s("span",{staticClass:"line-number"},[a._v("15")]),s("br"),s("span",{staticClass:"line-number"},[a._v("16")]),s("br"),s("span",{staticClass:"line-number"},[a._v("17")]),s("br"),s("span",{staticClass:"line-number"},[a._v("18")]),s("br"),s("span",{staticClass:"line-number"},[a._v("19")]),s("br"),s("span",{staticClass:"line-number"},[a._v("20")]),s("br"),s("span",{staticClass:"line-number"},[a._v("21")]),s("br"),s("span",{staticClass:"line-number"},[a._v("22")]),s("br"),s("span",{staticClass:"line-number"},[a._v("23")]),s("br"),s("span",{staticClass:"line-number"},[a._v("24")]),s("br"),s("span",{staticClass:"line-number"},[a._v("25")]),s("br")])]),s("h2",{attrs:{id:"spring-aop"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#spring-aop"}},[a._v("#")]),a._v(" "),s("a",{attrs:{href:"https://javaguide.cn/system-design/framework/spring/spring-knowledge-and-questions-summary.html#spring-aop",target:"_blank",rel:"noopener noreferrer"}},[a._v("Spring AOP"),s("OutboundLink")],1)]),a._v(" "),s("p",[a._v("AOP(Aspect-Oriented Programming:面向切面编程)能够将那些与业务无关，却为业务模块所共同调用的逻辑或责任（例如事务处理、日志管理、权限控制等）封装起来，便于减少系统的重复代码，降低模块间的耦合度，并有利于未来的可拓展性和可维护性。")]),a._v(" "),s("p",[a._v("Spring AOP 就是基于动态代理的，如果要代理的对象，实现了某个接口，那么 Spring AOP 会使用 "),s("strong",[a._v("JDK Proxy")]),a._v("，去创建代理对象，而对于没有实现接口的对象，就无法使用 JDK Proxy 去进行代理了，这时候 Spring AOP 会使用 "),s("strong",[a._v("Cglib")]),a._v(" 生成一个被代理对象的子类来作为代理")])])}),[],!1,null,null,null);s.default=e.exports}}]);